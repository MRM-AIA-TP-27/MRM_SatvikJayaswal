import cv2
import numpy as np

def detect_tennis_balls(frame):
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, (25, 50, 50), (65, 255, 255))
    
    # Add morphological operations to reduce noise
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
    
    mask = cv2.GaussianBlur(mask, (9, 9), 2)

    circles = cv2.HoughCircles(mask, cv2.HOUGH_GRADIENT, 1.2, 50,
                               param1=50, param2=30, minRadius=10, maxRadius=100)

    output = frame.copy()
    ball_count = 0
    
    if circles is not None:
        for x, y, r in np.uint16(np.around(circles[0])):
            # Draw circle around ball
            cv2.circle(output, (x, y), r, (0, 255, 0), 2)
            # Draw center point
            cv2.circle(output, (x, y), 3, (0, 0, 255), -1)
            # Display center coordinates
            cv2.putText(output, f"({x},{y})", (x-30, y-r-10),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
            ball_count += 1
    
    # Display ball count
    cv2.putText(output, f"Balls: {ball_count}", (10, 30),
               cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    
    return output, mask

def main():
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Camera not found.")
        return

    print("Press 'q' to quit, 's' to save screenshot.")
    count = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        result, mask = detect_tennis_balls(frame)
        
        # Create side-by-side display for screenshots
        mask_colored = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
        combined = np.hstack((frame, result, mask_colored))
        
        cv2.imshow("Original | Detection | Mask", combined)

        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break
        elif key == ord('s'):
            count += 1
            cv2.imwrite(f"screenshot_{count}.png", combined)
            print(f"Saved screenshot_{count}.png")

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
